generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PersonalInfo {
  id String @id @default(uuid()) // personalinfo

  phone           String?
  address         String?
  resume          String? // This could be a URL to a hosted resume
  linkedIn        String? // LinkedIn profile URL
  github          String? // GitHub profile URL
  portfolio       String? // Portfolio website URL
  skills          String[] // Array of skills
  experienceYears Int // Years of experience
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  //EXTERNAL MODEL
  applicantId     String
  applicant       Applicant @relation(fields: [applicantId], references: [id])
}

model Education {
  id          String    @id @default(uuid())
  level       String // e.g., "10th", "12th", "College"
  field       String // e.g., "Science", "Arts", "Computer Science"
  institution String // e.g., "XYZ High School", "ABC University"
  year        Int // Year of completion
  applicantId String
  applicant   Applicant @relation(fields: [applicantId], references: [id])
}

model Quiz {
  id        String    @id @default(uuid())
  name      String
  questions Question[]
  skills    Skills[]
}

model Question {
  id          String   @id @default(uuid())
  text        String
  options     String   // Possible answers, stored as a comma-separated list
  correctAnswer String
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id])
}

model Skills{
  id         String   @id @default(uuid())
  name       String
  assessment String
  applicantId String
  applicant  Applicant @relation(fields: [applicantId], references: [id])
  quizId     String?
  quiz       Quiz?     @relation(fields: [quizId], references: [id])
}


model Applicant {
  id           String  @id @default(uuid())
  firstName    String
  lastName     String
  email        String  @unique
  passwordHash String
  collegeId    String
  college      College @relation(fields: [collegeId], references: [id])
  
  skills       Skills[]
  personalInfos PersonalInfo[]
  applications  JobApplication[]

  educations Education[]
}

model College {
  id         String      @id @default(uuid())
  name       String
  location   String
  jobs       Job[]
  applicants Applicant[]
}

model Employer {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  password       String
  companyId      String
  company        Company       @relation(fields: [companyId], references: [id])
  jobs           Job[]
  Plan           Plan?         @relation(fields: [planId], references: [id])
  planId         String?
  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
}

model Company {
  id        String     @id @default(uuid())
  name      String
  location  String
  employers Employer[]
  jobs      Job[]
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  TEMPORARY
  REMOTE
}

model Plan {
  id           String     @id @default(uuid())
  name         String
  price        Decimal
  jobCount     Int
  collegeCount Int
  employers    Employer[]
}

enum SubscriptionType {
  FREE
  BASIC
  PREMIUM
}

model Subscription {
  id        String           @id @default(uuid())
  price     Decimal
  description String
  type      SubscriptionType
  createdAt DateTime         @default(now())
  duration  Int
  updatedAt DateTime         @updatedAt
  employers Employer[]
}

model Job {
  id           String           @id @default(uuid())
  title        String
  description  String
  postedAt     DateTime         @default(now())
  expiresAt    DateTime
  companyId    String
  company      Company          @relation(fields: [companyId], references: [id])
  applications JobApplication[]
  collegeId    String
  college      College          @relation(fields: [collegeId], references: [id])
  employerId   String
  employer     Employer         @relation(fields: [employerId], references: [id])
  type         JobType
  skills       String[]
}

model JobApplication {
  id          String    @id @default(uuid())
  jobId       String
  applicantId String
  status      String
  appliedAt   DateTime  @default(now())
  job         Job       @relation(fields: [jobId], references: [id])
  applicant   Applicant @relation(fields: [applicantId], references: [id])
}
